{"version":3,"file":"static/js/734.42cd2e0e.chunk.js","mappings":"qOAEMA,EACJ,yQACIC,EACJ,yHAEIC,EACJ,yJAKIC,EAAgB,QAChBC,EAAyB,yCASlBC,EAAwBC,EAAAA,KAAaC,MAAM,CACtDC,MAAOF,EAAAA,KAEJG,QAAQP,EAjBoB,4BAkB5BQ,SAAS,2BACZC,SAAUL,EAAAA,KAEPG,QAAQN,EAAeC,GACvBM,SAAS,gCAGDE,EAA2BN,EAAAA,KAAaC,MAAM,CACzDM,KAAMP,EAAAA,KAEHG,QAAQT,EAAWC,GACnBS,SAAS,0BACZF,MAAOF,EAAAA,KAEJG,QAAQP,EA9BX,wJA+BGQ,SAAS,2BACZC,SAAUL,EAAAA,KAEPG,QAAQN,EAAeC,GACvBM,SAAS,gCAGDI,EAA0BR,EAAAA,KAAaC,MAAM,CACxDM,KAAMP,EAAAA,KAEHG,QAAQT,EAAWC,GACnBS,SAAS,mBACZK,OAAQT,EAAAA,KAELG,QArCH,6EAEA,2GAoCGC,SAAS,4B,uOCuCd,EAjFkB,WAChB,IAAMM,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KAERC,EAAY,mCAAG,WAAOC,EAAP,mFAAsBC,EAAtB,EAAsBA,UAAtB,kBAECN,GAASO,EAAAA,EAAAA,IAAMF,IAAcG,SAF9B,OAEXC,EAFW,OAGjBP,EAAM,CACJQ,MAAM,iBAAD,OAAmBD,EAAIE,KAAKd,KAA5B,KACLe,OAAQ,UACRC,QAAS,SACTC,SAAU,MACVC,YAAY,IAEdT,IAViB,mDAYI,MAAjB,KAAMM,OAZO,0CAaRV,EAAM,CACXQ,MAAO,sCACPE,OAAQ,QACRC,QAAS,SACTC,SAAU,MACVC,YAAY,KAlBC,QAsBjBb,EAAM,CACJQ,MAAO,gDACPE,OAAQ,QACRC,QAAS,SACTC,SAAU,MACVC,YAAY,IA3BG,yDAAH,wDAgClB,OACE,SAAC,KAAD,CAAKC,GAAG,QAAQC,EAAG,EAAGC,QAAQ,KAAKC,EAAE,QAArC,UACE,SAAC,KAAD,CACEC,cAAe,CAAE5B,MAAO,GAAIG,SAAU,IACtC0B,iBAAkBhC,EAAAA,EAClBiC,SAAUlB,EAHZ,SAKG,gBAAGmB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,SAAC,KAAD,WACE,UAAC,IAAD,CAAQC,QAAS,EAAGC,MAAM,aAA1B,WACE,UAAC,KAAD,CAAaC,YAAaJ,EAAO/B,OAASgC,EAAQhC,MAAlD,WACE,SAAC,IAAD,CAAWoC,QAAQ,QAAnB,SAA2B,WAC3B,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,QACHlC,KAAK,QACLmC,KAAK,QACLnB,QAAQ,YAEV,SAAC,KAAD,UAAmBU,EAAO/B,YAG5B,UAAC,KAAD,CAAamC,YAAaJ,EAAO5B,UAAY6B,EAAQ7B,SAArD,WACE,SAAC,IAAD,CAAWiC,QAAQ,WAAnB,SAA8B,cAC9B,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,WACHlC,KAAK,WACLmC,KAAK,WACLnB,QAAQ,YAEV,SAAC,KAAD,UAAmBU,EAAO5B,eAG5B,SAAC,IAAD,CAAQqC,KAAK,SAASC,YAAY,OAAOC,MAAM,OAA/C,SAAsD,eA3B3D,KAoCR,E,SCnFD,EARc,WACZ,OACE,SAAC,IAAD,CAAMC,QAAQ,SAAST,MAAM,WAAWU,GAAG,OAAOC,EAAE,SAASrB,GAAG,WAAhE,UACE,SAAC,EAAD,KAGL,C","sources":["common/validation.js","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nconst nameRegex =\n  /^[a-zA-Zа-яґєіїА-ЯҐЄІЇ]+(([' -][a-zA-Zа-яґєіїА-ЯҐЄІЇ ])?[a-zA-Zа-яґєіїА-ЯҐЄІЇ]*)*$/;\nconst nameWarningMessage =\n  \"Name may contain only letters, apostrophe, dash and spaces. For example Jacob Mercer, Charles de Castelmore d'Artagnan\";\n\nconst emailRegex =\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nconst loginEmailWarningMessage = 'Please enter valid email';\nconst registerEmailWarningMessage =\n  \"Email address must include letters/digits, '@' symbol, and valid domain. Periods, underscores, hyphens can be also used. For example email@gmail.com\";\n\nconst passwordRegex = /.{8,}/;\nconst passwordWarningMessage = 'Password must be at least 8 characters';\n// password regex: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/\n// 8 characters: at least one digit, one lower case, one upper case\n\nconst numberRegex =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\nconst numberWarningMessage =\n  'Phone number must be at least 5 digits and can contain spaces, dashes, parentheses and can start with +';\n\nexport const loginValidationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .matches(emailRegex, loginEmailWarningMessage)\n    .required('Please enter your email'),\n  password: yup\n    .string()\n    .matches(passwordRegex, passwordWarningMessage)\n    .required('Please enter your password'),\n});\n\nexport const registerValidationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(nameRegex, nameWarningMessage)\n    .required('Please enter your name'),\n  email: yup\n    .string()\n    .matches(emailRegex, registerEmailWarningMessage)\n    .required('Please enter your email'),\n  password: yup\n    .string()\n    .matches(passwordRegex, passwordWarningMessage)\n    .required('Please enter your password'),\n});\n\nexport const contactValidationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(nameRegex, nameWarningMessage)\n    .required('Please add name'),\n  number: yup\n    .string()\n    .matches(numberRegex, numberWarningMessage)\n    .required('Please add phone number'),\n});\n","import { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { logIn } from 'redux/auth/authOperations';\nimport { loginValidationSchema } from 'common/validation';\nimport {\n  Box,\n  VStack,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Button,\n  useToast,\n} from '@chakra-ui/react';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const handleSubmit = async (credentials, { resetForm }) => {\n    try {\n      const res = await dispatch(logIn(credentials)).unwrap();\n      toast({\n        title: `Welcome back, ${res.user.name}!`,\n        status: 'success',\n        variant: 'subtle',\n        position: 'top',\n        isClosable: true,\n      });\n      resetForm();\n    } catch (error) {\n      if (error.status === 400) {\n        return toast({\n          title: 'The email or password is incorrect.',\n          status: 'error',\n          variant: 'subtle',\n          position: 'top',\n          isClosable: true,\n        });\n      }\n\n      toast({\n        title: 'Something went wrong. Please try agail later.',\n        status: 'error',\n        variant: 'subtle',\n        position: 'top',\n        isClosable: true,\n      });\n    }\n  };\n\n  return (\n    <Box bg=\"white\" p={6} rounded=\"md\" w=\"300px\">\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        validationSchema={loginValidationSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched }) => (\n          <Form>\n            <VStack spacing={4} align=\"flex-start\">\n              <FormControl isInvalid={!!errors.email && touched.email}>\n                <FormLabel htmlFor=\"email\">Email</FormLabel>\n                <Field\n                  as={Input}\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  variant=\"filled\"\n                />\n                <FormErrorMessage>{errors.email}</FormErrorMessage>\n              </FormControl>\n\n              <FormControl isInvalid={!!errors.password && touched.password}>\n                <FormLabel htmlFor=\"password\">Password</FormLabel>\n                <Field\n                  as={Input}\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  variant=\"filled\"\n                />\n                <FormErrorMessage>{errors.password}</FormErrorMessage>\n              </FormControl>\n\n              <Button type=\"submit\" colorScheme=\"blue\" width=\"full\">\n                Log in\n              </Button>\n            </VStack>\n          </Form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport { Flex } from '@chakra-ui/react';\n\nconst Login = () => {\n  return (\n    <Flex justify=\"center\" align=\"baseline\" pt=\"24px\" h=\"93.9vh\" bg=\"gray.100\">\n      <LoginForm />\n    </Flex>\n  );\n};\n\nexport default Login;\n"],"names":["nameRegex","nameWarningMessage","emailRegex","passwordRegex","passwordWarningMessage","loginValidationSchema","yup","shape","email","matches","required","password","registerValidationSchema","name","contactValidationSchema","number","dispatch","useDispatch","toast","useToast","handleSubmit","credentials","resetForm","logIn","unwrap","res","title","user","status","variant","position","isClosable","bg","p","rounded","w","initialValues","validationSchema","onSubmit","errors","touched","spacing","align","isInvalid","htmlFor","as","Input","id","type","colorScheme","width","justify","pt","h"],"sourceRoot":""}